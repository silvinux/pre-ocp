---
- name: "Reboot server"
  shell: sleep 2 && shutdown -r now "Ansible Restart Triggered"
  async: 1
  poll: 0
  ignore_errors: true

- name: "Waiting for server to come back"
  wait_for:
    host: "{{ inventory_hostname }}"
    state: started
    delay: 10
    connect_timeout: 5
    timeout: 300
    port: 22
  delegate_to: 127.0.0.1
  become: false

- name: "Check if host is registered to RHN"
  shell: subscription-manager status| awk '/Overall Status:/{print $3}'
  register: subscription_status
  changed_when: false

- name: "Check ansible repo verion"
  shell: "subscription-manager repos --list-enabled| egrep ansible|grep 'Repo ID'|awk '{print $3}'|awk -F- '{print $5}'"
  register: ansible_repo_version 
  changed_when: false

- name: "Check ose repo verion"
  shell: "subscription-manager repos --list-enabled| egrep ose|grep 'Repo ID'|awk '{print $3}'|awk -F- '{print $5}'"
  register: ose_repo_version 
  changed_when: false

- name: import secret variable file
  include_vars: "vars/vault.yml"
  no_log: true
  when: ansible_distribution == 'RedHat' and register_rhn and subscription_status != 'Current'

- name: "register System with RHN Subscription Manager"
  redhat_subscription:
    state: present
    username: "{{ rhn_user }}"
    password: "{{ rhn_pwd }}"
    pool: "{{ rhn_pool_name }}"
  when: ansible_distribution == 'RedHat' and register_rhn and subscription_status != 'Current'

- name: "Disable all repositories"
  command: subscription-manager repos --disable=\*
  when: ansible_distribution == 'RedHat' and register_rhn and ansible_repo_version != OCP_VERSION or ansible_repo_version != ANSIBLE_VERSION

- name: "Enable the needed rhel repositories"
  command: subscription-manager repos --enable={{ item }}
  with_items: "{{ rhel_repos }}"
  when: ansible_distribution == 'RedHat' and register_rhn and ansible_repo_version != OCP_VERSION or ansible_repo_version != ANSIBLE_VERSION

- name: "Update packages"
  yum:
    name: '*'
    state: latest
  register: yum_result
  when: sys_update == true

- name: "Check if loaded kernel is the latest"
  shell: if [ $(uname -r) == $(rpm -q kernel | tail -n 1 | sed -e 's/kernel-//g') ] ; then echo no ; else echo reboot; fi
  ignore_errors: true
  register: reboot_hint

- name: "Make sure packages are not installed"
  package:
    name: "{{ item }}"
    state: absent
  with_items: "{{ packages_uninstall }}"

- name: "Make sure packages are installed"
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages_install }}"

- name: "Reboot server, load new kernel"
  shell: sleep 2 && shutdown -r now "Ansible Restart Triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: yum_result.changed or reboot_hint.stdout.find("reboot") != -1

- name: "Waiting for server to come back"
  wait_for:
    host: "{{ inventory_hostname }}"
    state: started
    delay: 10
    connect_timeout: 5
    timeout: 300
    port: 22
  delegate_to: 127.0.0.1
  become: false
  ignore_errors: true

- name: Refresh inventory to ensure new instaces exist in inventory
  meta: refresh_inventory
